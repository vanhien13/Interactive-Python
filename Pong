# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True
direction = RIGHT
paddle1_vel = 0
paddle2_vel = 0
score1 = 0
score2 = 0

ball_pos = [WIDTH / 2, HEIGHT / 2] 
ball_vel = [-2, 2]
paddle1_pos = HEIGHT/2
paddle2_pos = HEIGHT/2
# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    ball_pos[0] = WIDTH / 2  
    ball_pos[1] = HEIGHT / 2
    
    if direction == RIGHT:
        ball_vel[0] = random.randrange(2, 4) 
        ball_vel[1] = -random.randrange(1, 3)
    
    elif direction == LEFT:    
        ball_vel[0] = -random.randrange(2, 4) 
        ball_vel[1] = -random.randrange(1, 3)
      

# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2  # these are ints
    #spawn_ball(direction)

def draw(c):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel
 
        
    # draw mid line and gutters
    c.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    c.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    c.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
    
    # update ball
    ball_pos[0] += ball_vel[0]  
    ball_pos[1] += ball_vel[1]
    
    #collide and relect off the left hand side of the cavas
    if ball_pos[1] <= BALL_RADIUS:
        ball_vel[1] = -ball_vel[1]
    if ball_pos[1] >=(HEIGHT-1) - BALL_RADIUS:
        ball_vel[1] = -ball_vel[1]
    #Add code to test wherether the ball touches/collides with the left and right paddles 
    if ball_pos[0] <= BALL_RADIUS + PAD_WIDTH:
        if ball_pos[1] <= paddle1_pos+HALF_PAD_HEIGHT and ball_pos[1] >= paddle1_pos - HALF_PAD_HEIGHT:
            ball_vel[0] = -ball_vel[0]*1.1
        else:
            spawn_ball(RIGHT)
            score2 = score2 +1
            #print score2
    if ball_pos[0] >=(WIDTH-1) - BALL_RADIUS - PAD_WIDTH:
        if ball_pos[1] <= paddle2_pos+HALF_PAD_HEIGHT and ball_pos[1] >= paddle2_pos - HALF_PAD_HEIGHT:
            ball_vel[0] = -ball_vel[0]*1.1
        else:
            spawn_ball(LEFT)
            score1 = score1 +1
            #print score1
    #Add code to test wherether the ball touches/collides with the left and right gutters    
    #if ball_pos[0] == PAD_WIDTH and ball_vel[0] < 0:
    #    score2 = score2+1
        #score2 = score2 -1
    #    print score2
        #print ball_vel[0]
    #if ball_pos[0] == WIDTH - PAD_WIDTH and ball_vel[0] < 0:
    #    score1 = score1+1
    #    print score1
        #print ball_vel[0]
    # draw ball
    c.draw_circle (ball_pos, BALL_RADIUS, 1, "White", "White")
   ###### # update paddle's vertical position, keep paddle on the screen
    ##### here is where you should update the paddle position
    ##### just like you're updating the ball position
    
    ###### here, check whether paddle1_pos + paddle1_vel is out of bounds
    if (paddle1_pos + paddle1_vel >= HALF_PAD_HEIGHT) and (paddle1_pos + paddle1_vel <= HEIGHT - HALF_PAD_HEIGHT): 
        paddle1_pos += paddle1_vel
        #print paddle1_pos + paddle1_vel
    
    #paddle1_pos = paddle1_pos + paddle1_vel
    ###### here, check whether paddle2_pos + paddle2_vel is out of bounds
        #paddle2_pos = paddle2_pos + paddle2_vel
        ###### here, check whether paddle1_pos + paddle1_vel is out of bounds
    if (paddle2_pos + paddle2_vel >= HALF_PAD_HEIGHT) and (paddle2_pos + paddle2_vel <= HEIGHT - HALF_PAD_HEIGHT): 
        paddle2_pos += paddle2_vel
        #print paddle2_pos + paddle2_vel
    
    
    # draw paddles
    #c.draw_line((0, (HEIGHT-PAD_HEIGHT)/2), (0, HEIGHT - (PAD_HEIGHT*2)), 12, 'Red')
    #c.draw_line((WIDTH, (HEIGHT-PAD_HEIGHT)/2), (WIDTH, HEIGHT - (PAD_HEIGHT*2)), 12, 'Red')
    c.draw_line((HALF_PAD_WIDTH, paddle1_pos+HALF_PAD_HEIGHT), (HALF_PAD_WIDTH, paddle1_pos - HALF_PAD_HEIGHT), 12, 'Red')
    c.draw_line((WIDTH - HALF_PAD_WIDTH, paddle2_pos+HALF_PAD_HEIGHT), (WIDTH - HALF_PAD_WIDTH, paddle2_pos - HALF_PAD_HEIGHT), 12, 'Blue')
    c.draw_text(str(score1), [20, 50], 30, 'Red')
    c.draw_text(str(score2), [560, 50], 30, 'Blue')
    #c.draw_text('C', (80, 50), 12, 'Gray', 'serif')
    #c.draw_line((HALF_PAD_WIDTH, paddle2_pos2+HALF_PAD_HEIGHT), (HALF_PAD_WIDTH, paddle2_pos2 - HALF_PAD_HEIGHT), 12, 'Red')
    #c.draw_line((HALF_PAD_WIDTH, 400), (HALF_PAD_WIDTH, 400), 12, 'Red')
    #c.draw_line((HALF_PAD_WIDTH, paddle1_pos1-HALF_PAD_HEIGHT), (HALF_PAD_WIDTH, paddle1_pos1 + HALF_PAD_HEIGHT), 12, 'Red')
    #c.draw_line((0, paddle1_pos1+HALF_PAD_HEIGHT), (0, paddle1_pos1 - HALF_PAD_HEIGHT), 12, 'Red')
    # draw scores
        
def keydown(key):
    global paddle1_vel, paddle2_vel
    if key == simplegui.KEY_MAP["w"]:
        paddle1_vel = -4
    elif key == simplegui.KEY_MAP["s"]:
        paddle1_vel = 4                              
    if key == simplegui.KEY_MAP["up"]:
        paddle2_vel = -4
    elif key == simplegui.KEY_MAP["down"]:
        paddle2_vel = 4                      
def keyup(key):
    global paddle1_vel, paddle2_vel 
    #paddle1_vel = 0
    if key == simplegui.KEY_MAP["w"]:
        paddle1_vel = 0
    elif key == simplegui.KEY_MAP["s"]:
        paddle1_vel = 0
    if key == simplegui.KEY_MAP["up"]:
        paddle2_vel = 0
    elif key == simplegui.KEY_MAP["down"]:
        paddle2_vel = 0

def restart():
    global score1, score2, ball_pos, ball_vel
    score1 = 0
    score2 = 0
    bal_vel = 0
    ball_pos = [WIDTH / 2, HEIGHT / 2] 
    if paddle1_vel > 0:
        spawn_ball(LEFT)
    if paddle2_vel > 0:
        spawn_ball(RIGHT)
 # create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.add_button("Restart", restart, 100)

# start frame
new_game()
frame.start()
