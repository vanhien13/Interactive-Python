# Mini-project #6 - Blackjack

import simplegui
import random

# load card sprite - 949x392 - source: jfitz.com
CARD_SIZE = (73, 98)
CARD_CENTER = (36.5, 49)
card_images = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/cards.jfitz.png")

CARD_BACK_SIZE = (71, 96)
CARD_BACK_CENTER = (35.5, 48)
card_back = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/card_back.png")    

# initialize some useful global variables
in_play = False
outcome = ""
score = 0

# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}


# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        
class Hand:
    def __init__(self):
        self.hand = []

    def __str__(self):
        hand_str = ""
        for card in self.hand:
            hand_str += str(card) + "     "
        return "Hand: " + hand_str
    
    def add_card(self, card):
        self.hand.append(card)

    def get_value(self):
        # count aces as 1, if the hand has an ace, then add 10 to hand value if it doesn't bust
        hand_value = 0
        contains_aces = False
        for card in self.hand:
            hand_value += VALUES[card.get_rank()]
            if card.get_rank() == 'A':
                contains_aces = True
            #else:
            #    contains_aces = False
            
        if contains_aces == False:
            return hand_value
        else:
            if (hand_value + 10) <= 21:
               return hand_value +10
            else: 
               return hand_value



   
    def draw(self, canvas, pos):
        #pass	# draw a hand on the canvas, use the draw method for cards
        
        draw_pos= pos
        for card in self.hand:
            card.draw(canvas,draw_pos)
            pos[0] += CARD_SIZE[0]
#            player_hand.draw(canvas, [200, 300])
#            dealer_hand.draw(canvas, [0, 300])
        
# define deck class 
class Deck:
    def __init__(self):
        self.deck = []
        for suit in SUITS:
            for rank in RANKS:
                self.New_Card = Card(suit, rank)
                self.deck.append(self.New_Card)     
                      

    def shuffle(self):
        # shuffle the deck 
        return random.shuffle(self.deck)

    def deal_card(self):
        return self.deck.pop(0)
    
    def __str__(self):
        deck_str = ""
        for New_Card in self.deck:
            deck_str += str(New_Card) + "     "
        return "Deck: " + deck_str       




#define event handlers for buttons
def deal():
    global outcome, in_play, deck, player_hand, dealer_hand, score
    if in_play == True:
        in_play = False
        outcome = "Player loses!"
        print outcome
        score -= 1
    else:
    
        deck = Deck()
        deck.shuffle()
        player_hand = Hand()
        dealer_hand = Hand()

        for i in range(2):
            player_hand.add_card(deck.deal_card())
            dealer_hand.add_card(deck.deal_card())
    
        #outcome = ""

    
        in_play = True

def hit():
    global deck, player_hand, dealer_hand, in_play, hand_value, outcome, score    # replace with your code below
    # if the hand is in play, hit the player
    if in_play == True and player_hand.get_value() <= 21:
        player_hand.add_card(deck.deal_card())
    if player_hand.get_value()>21:
        # if busted, assign a message to outcome, update in_play and score
        #print "Player hand contains " + str(player_hand) + " Player has busted, dealer wins"
        outcome = "Player has: " + str(player_hand.get_value()) +" Dealer has: " + str(dealer_hand.get_value()) + " Player has busted, dealer wins"
        in_play = False
        score -= 1 
       
def stand():
    global deck, player_hand, dealer_hand, in_play, outcome, score 
    #in_play = True
    # if hand is in play, repeatedly hit dealer until his hand has value 17 or more
    #if in_play == True:
    while dealer_hand.get_value() < 17:
        dealer_hand.add_card(deck.deal_card())         
    if dealer_hand.get_value() <= 21:
        if dealer_hand.get_value() >= player_hand.get_value():                    
            outcome = "Player has: " + str(player_hand.get_value()) +" Dealer has: " + str(dealer_hand.get_value()) + " Dealer wins"
            in_play = False
            score -=1
        #elif dealer_hand == player_hand:
        #    print "We have a tie"
        else:
                #break
            outcome = "Player has: " + str(player_hand.get_value()) +" Dealer has: " + str(dealer_hand.get_value()) + " Player wins"
            in_play = False
            score +=1
    elif dealer_hand.get_value() > 21:
            outcome = "Player has: " + str(player_hand.get_value()) +" Dealer has: " + str(dealer_hand.get_value()) +  " Dealer busted and player wins"
            in_play = False
            score +=1
    # assign a message to outcome, update in_play and score

# draw handler    
def draw(canvas):
    # test to make sure that card.draw works, replace with your code below
    player_hand.draw(canvas, [80,350])
    dealer_hand.draw(canvas, [80,150])
    canvas.draw_text("BlackJack",[350,100], 28, "Red")
    canvas.draw_text("Dealer's Hand",[100,100], 18, "Red")
    canvas.draw_text("Player's Hand",[100,500], 18, "Red")
    canvas.draw_text("Player's Score: " + str(score),[200,650], 18, "Red")
    if in_play:
        canvas.draw_image(card_back, CARD_BACK_CENTER, CARD_BACK_SIZE, [80+CARD_BACK_SIZE[0]//2,150+CARD_BACK_SIZE[1]//2] , CARD_BACK_SIZE)
        canvas.draw_text("Hit or Stand ??",[500,300], 18, "Red")
    else:
        #canvas.draw_text("Value : "+ str(dealer_hand), [300,290], 15, "white")
        canvas.draw_text("New Deal ??",[500,300], 18, "Red")
        canvas.draw_text(outcome,[200,600], 18, "Red")
        
        

#def draw(self, canvas, pos):
    


# initialization frame
frame = simplegui.create_frame("Blackjack", 800, 800)
frame.set_canvas_background("Green")

#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)


# get things rolling

frame.start()
deal()

# remember to review the gradic rubric
